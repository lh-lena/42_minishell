input: string --> command list
there is:
    -> cmd
    -> token ' " | > < >> << $ VAR=VAL
    -> file in/out, here_doc

// single quots
''
print the literal value of each character within the single-quotes

// double quots
""
print the literal value of each character within the single-quotes, except $

if $:
    print VAR's value
if \:
    print special char \t \n ..



// env - Prints environment
// https://www.digitalocean.com/community/tutorials/how-to-read-and-set-environmental-and-shell-variables-on-linux 
KEY=VAL
KEY="value with spaces"
TEST_VAR='Hello World!'
KEY=value1:value2:...

export TEST_VAR -> set our variable to env (getenv -> to check)
unset VAR       -> unset a variable, either shell or environmental
echo '$VAR'     -> print literally
echo "$VAR"     -> print VAR's VAL

if VAR hasn't been setted:
    echo $VAR           -> print a NEW_EMPTY_LINE
    echo "abc$VARde"    -> skip all after $VAR

$export TEST=1
INFOPATH=/opt/homebrew/share/info:
TEST=1
LC_CTYPE=UTF-8
_=/usr/bin/env

** VAR name is limited with , . | / \ issace() 

// export (Adds/replaces variable in environment)

// unset (Removes variable from environment | $VAR)

// $?
print exit status

// cd (Changes current working directory, updating PWD and OLDPWD | chdir)

// echo -n (Prints arguments separated with a space followed by a new line| -n | write)
/*
ohladkov@c4c4c1:~$ echo "jgd$A+dsis"
jgd+dsis
ohladkov@c4c4c1:~$ echo -n "jgd$Adsis"
jgdohladkov@c4c4c1:~$ echo "jgd$Adsis"
jgd
ohladkov@c4c4c1:~$ 
*/

// pwd (Prints current working directory | no parameters | getcwd)


TODO
// function to change VAR to VAR if -> " and return string without ",
else -> ' doesn't change VAR and return string without '


// to compile
ohladkov@c4b4c6:~/Documents/minishell$ cc -Wall -Werror -Wextra *.c -lreadline -fsanitize=address
valgrind --suppressions=readline.supp --leak-check=full --show-leak-kinds=all ./a.out

gdb program -ex r
--until it crushed
bt

// Leak
For example: The first message describes a simple case of a single 8 byte block that has been definitely lost. 
The second case mentions both "direct" and "indirect" leaks.
The distinction is that a direct leak is a block which has no pointers to it. 
An indirect leak is a block which is only pointed to by other leaked blocks. Both kinds of leak are bad.



